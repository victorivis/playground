
//Novo
//
std::vector<Lance> possiveis_lances_peca(std::pair<int, int> origem, std::vector<std::vector<int>>& tabuleiro){
	std::vector<Lance> saida;
	std::vector<int> direcoes;

	switch(tabuleiro[origem.first][origem.second]){
		/*
        case BlackPawn:
			if(movimento_permitido(Sul, Mover, tabuleiro, {i, j}))
				saida.push_back(mover_direcao(Norte, {i, j}));
			
			direcoes = {Sudeste, Sudoeste};
			sequencia_lances(direcoes, origem, Capturar, saida, tabuleiro, 1);
			break;
		
		case WhitePawn:
			if(movimento_permitido(Norte, Mover, tabuleiro, {i, j}))
				saida.push_back(mover_direcao(Norte, {i, j}));

			direcoes = {Nordeste, Noroeste};
			sequencia_lances(direcoes, origem, Capturar, saida, tabuleiro, 1);
			break;
		*/
		case BlackKing:
		case WhiteKing:
			direcoes = {Norte, Sul, Leste, Oeste, Nordeste, Noroeste, Sudeste, Sudoeste};
			sequencia_lances(direcoes, origem, MoverCapturar, saida, tabuleiro, 1);
			break;

		case BlackRook:
		case WhiteRook:
			direcoes = {Norte, Sul, Leste, Oeste};
			sequencia_lances(direcoes, origem, Linha, saida, tabuleiro, 1);
			break;
			
		case BlackBishop:
		case WhiteBishop:
			direcoes = {Nordeste, Noroeste, Sudeste, Sudoeste};
			sequencia_lances(direcoes, origem, Linha, saida, tabuleiro, 1);
			break;
			
		case BlackQueen:
		case WhiteQueen:
			direcoes =  {Norte, Sul, Leste, Oeste, Nordeste, Noroeste, Sudeste, Sudoeste};
			sequencia_lances(direcoes, origem, Linha, saida, tabuleiro, 1);
			break;
	}

	return saida;
}

std::vector<Lance> todos_possiveis_lances(std::vector<std::vector<int>>& tabuleiro){
	std::vector<Lance> saida;
	
	for(uint8_t i=0; i<tabuleiro.size(); i++){
		for(uint8_t j=0; j<tabuleiro[i].size(); j++){
			std::pair<int, int> origem = {i, j};

			std::vector<Lance> atual = possiveis_lances_peca(origem, tabuleiro);
			for(int k=0; k<atual.size(); k++){
				saida.push_back(atual[i]);
			}
		}
	}
	
	return saida;
}


//Antigo
//
std::vector<Lance> todos_possiveis_lances(std::vector<std::vector<int>>& tabuleiro){
	std::vector<Lance> saida;
	
	for(uint8_t i=0; i<tabuleiro.size(); i++){
		for(uint8_t j=0; j<tabuleiro[i].size(); j++){
			std::pair<int, int> origem = {i, j};
			std::vector<int> direcoes;
			switch(tabuleiro[i][j]){
				/*
                case BlackPawn:
					if(movimento_permitido(Sul, Mover, tabuleiro, {i, j}))
						saida.push_back(mover_direcao(Norte, {i, j}));

					direcoes = {Sudeste, Sudoeste};
					sequencia_lances(direcoes, origem, Capturar, saida, tabuleiro, 1);
					break;
				
				case WhitePawn:
					if(movimento_permitido(Norte, Mover, tabuleiro, {i, j}))
						saida.push_back(mover_direcao(Norte, {i, j}));

					direcoes = {Nordeste, Noroeste};
					sequencia_lances(direcoes, origem, Capturar, saida, tabuleiro, 1);
					break;
				*/

				case BlackKing:
				case WhiteKing:
					direcoes = {Norte, Sul, Leste, Oeste, Nordeste, Noroeste, Sudeste, Sudoeste};
					sequencia_lances(direcoes, origem, MoverCapturar, saida, tabuleiro, 1);
					break;

				case BlackRook:
				case WhiteRook:
					direcoes = {Norte, Sul, Leste, Oeste};
					sequencia_lances(direcoes, origem, Linha, saida, tabuleiro, 1);
					break;
				
				case BlackBishop:
				case WhiteBishop:
					direcoes = {Nordeste, Noroeste, Sudeste, Sudoeste};
					sequencia_lances(direcoes, origem, Linha, saida, tabuleiro, 1);
					break;

				case BlackQueen:
				case WhiteQueen:
					direcoes =  {Norte, Sul, Leste, Oeste, Nordeste, Noroeste, Sudeste, Sudoeste};
					sequencia_lances(direcoes, origem, Linha, saida, tabuleiro, 1);
					break;
			}
		}
	}
	
	return saida;
}
